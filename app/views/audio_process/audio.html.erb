<!DOCTYPE html>

<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Live input record and playback</title>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <style type='text/css'>
    ul { list-style: none; }
    #recordingslist audio { display: block; margin-bottom: 10px; }
  </style>
</head>
<body>

  <h1>Recorder.js simple WAV export example</h1>

  <p>Make sure you are using a recent version of Google Chrome.</p>
  <p>Also before you enable microphone input either plug in headphones or turn the volume down if you want to avoid ear splitting feedback!</p>

  <button onclick="startRecording(this);">record</button>
  <button onclick="stopRecording(this);" disabled>stop</button>

  <h2>Recordings</h2>
  <ul id="recordingslist"></ul>

  <h2>Log</h2>
  <pre id="log"></pre>

  <script>
  function __log(e, data) {
    log.innerHTML += "\n" + e + " " + (data || '');
  }
  var audio_context;
  var recorder;



  function startUserMedia(stream) {
    var input = audio_context.createMediaStreamSource(stream);
    __log('Media stream created.');
    // Uncomment if you want the audio to feedback directly
    //input.connect(audio_context.destination);
    //__log('Input connected to audio context destination.');

    recorder = new Recorder(input);
    __log('Recorder initialised.');
  }
  function startRecording(button) {
    recorder && recorder.record();
    button.disabled = true;
    button.nextElementSibling.disabled = false;
    __log('Recording...');
  }
  function stopRecording(button) {
    var time = new Date();
    console.log(time.getTime());

    recorder && recorder.stop();
    button.disabled = true;
    button.previousElementSibling.disabled = false;
    __log('Stopped recording.');

    // create WAV download link using audio data blob
    createDownloadLink();
    recorder.exportWAV(function(s) {
        // audio.src = window.URL.createObjectURL(s);
        sendWaveToPost(s);
    });

    recorder.clear();
  }

  function sendWaveToPost(blob) {
        var data = new FormData();

        var fileName = (new Date()).getTime() + ".wav";

        <% @s3_direct_post.fields.map do |(name, value)| %>
          data.set('<%= name %>', "<%= value %>");
        <% end %>

        data.append("file", blob, fileName);

        var oReq = new XMLHttpRequest();

        oReq.onreadystatechange = function() {
           if (this.readyState == 4 && this.status == 201) {
               sendLinkToServer(this);
           }
        };

        oReq.open("POST", "<%= @s3_direct_post.url %>");

        oReq.setRequestHeader("processData", false);
        oReq.send(data);
        var awsRes;
        oReq.onload = function(oEvent) {
            if (oReq.status == 201) {
                console.log("Uploaded.");
            } else {
                console.log("Error " + oReq.status + " occurred uploading your file.");
            }
        };

        function sendLinkToServer(xmlRes){
          var raw = xmlRes.responseXML;
          var resData = new FormData();
          resData.set("awsRes", new XMLSerializer().serializeToString(raw.documentElement));

          var oReq2 = new XMLHttpRequest();
          oReq2.open("POST", "audio_process/save_link");
          token = $('meta[name=csrf-token]').attr('content');
          oReq2.setRequestHeader('X-CSRF-Token', token);
          oReq2.send(resData);
          oReq2.onload = function(oEvent) {
              if (oReq2.status == 201) {
                  console.log("Sent awsRes data to server.");
              } else {
                  console.log("Error " + oReq2.status + " occurred.");
              }
          };
        }
  }


  function createDownloadLink() {
    recorder && recorder.exportWAV(function(blob) {
      var url = URL.createObjectURL(blob);
      var li = document.createElement('li');
      var au = document.createElement('audio');
      var hf = document.createElement('a');

      au.controls = true;
      au.src = url;
      hf.href = url;
      hf.download = new Date().toISOString() + '.wav';
      hf.innerHTML = hf.download;
      li.appendChild(au);
      li.appendChild(hf);
      recordingslist.appendChild(li);
    });
  }
  window.onload = function init() {
    try {
      // webkit shim
      window.AudioContext = window.AudioContext || window.webkitAudioContext;
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
      window.URL = window.URL || window.webkitURL;

      audio_context = new AudioContext;
      __log('Audio context set up.');
      __log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
    } catch (e) {
      alert('No web audio support in this browser!');
    }

    navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
      __log('No live audio input: ' + e);
    });
  };
  </script>

<%= javascript_include_tag( 'recorder' ) %>
</body>
