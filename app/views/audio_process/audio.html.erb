<!DOCTYPE html>

<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Live input record and playback</title>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <style type='text/css'>
    ul { list-style: none; }
    #recordingslist audio { display: block; margin-bottom: 10px; }
  </style>
</head>
<body>

  <h1>Recorder.js simple WAV export example</h1>

  <p>Make sure you are using a recent version of Google Chrome.</p>
  <p>Also before you enable microphone input either plug in headphones or turn the volume down if you want to avoid ear splitting feedback!</p>

  <button onclick="startRecording(this);">record</button>
  <button onclick="stopRecording(this);" disabled>stop</button>

  <h2>Recordings</h2>
  <ul id="recordingslist"></ul>

  <h2>Log</h2>
  <pre id="log"></pre>
  <%= csrf_meta_tags %>


  <script>


    function __log(e, data) {
      log.innerHTML += "\n" + e + " " + (data || '');
    }
    var audio_context;
    var recorder;


    function presign(){
      var params = {
        _: Date.now(),
        book_id: "demo",
      }

      var tkn = {"X-CSRF-TOKEN": document.getElementsByName("csrf-token")[0].content}

      console.log(tkn)
      return axios.post('/aws_presign', null, {
        params: params,
        headers: tkn,
      })
      .then(function(res){
        console.log(res);
        console.log("got presign.");
        return res.data
      })
      .catch(function (err) {
        throw err
      })
    }


    function stopRecording(button) {
      var time = new Date();
      console.log(time.getTime());

      recorder && recorder.stop();
      button.disabled = true;
      button.previousElementSibling.disabled = false;
      __log('Stopped recording.');

      // create WAV download link using audio data blob
      createDownloadLink();
      recorder.exportWAV(function(s) {
          presign()
          .then( function(awsPresign) {
            sendWavToS3(s, awsPresign.url, awsPresign.fields);
          })
          .catch(function (err) {
            console.log("upload fail...", err, err.request);
            return false
          })
      });
      recorder.clear();
    }



    function sendWavToS3(blob, url, fields) {
      var data = new FormData();

      var fileName = ("hello_there.wav");

      for (var key in fields) {
        // skip loop if the property is from prototype
        if (!fields.hasOwnProperty(key)) continue;

        var obj = fields[key];
        for (var prop in obj) {
          if(!obj.hasOwnProperty(prop)) continue;
          data.set(key, obj)
        }
      }

      data.append("file", blob, fileName);

      axios.post(url, data)
      .then(function(res){
        console.log(res);
        console.log("yay!");
      })
      .catch(function (err) {
        throw err
      })
    }





    function startUserMedia(stream) {
      var input = audio_context.createMediaStreamSource(stream);
      __log('Media stream created.');
      // Uncomment if you want the audio to feedback directly
      //input.connect(audio_context.destination);
      //__log('Input connected to audio context destination.');

      recorder = new Recorder(input);
      __log('Recorder initialised.');
    }

    function startRecording(button) {
      recorder && recorder.record();
      button.disabled = true;
      button.nextElementSibling.disabled = false;
      __log('Recording...');
    }


    function createDownloadLink() {
      recorder && recorder.exportWAV(function(blob) {
        var url = URL.createObjectURL(blob);
        var li = document.createElement('li');
        var au = document.createElement('audio');
        var hf = document.createElement('a');

        au.controls = true;
        au.src = url;
        hf.href = url;
        hf.download = new Date().toISOString() + '.wav';
        hf.innerHTML = hf.download;
        li.appendChild(au);
        li.appendChild(hf);
        recordingslist.appendChild(li);
      });
    }
    window.onload = function init() {
      try {
        // webkit shim
        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
        window.URL = window.URL || window.webkitURL;

        audio_context = new AudioContext;
        __log('Audio context set up.');
        __log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
      } catch (e) {
        alert('No web audio support in this browser!');
      }

      navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
        __log('No live audio input: ' + e);
      });
    };
  </script>

<%= javascript_include_tag( 'recorder' ) %>
</body>
